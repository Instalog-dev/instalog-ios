// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name InstalogIOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
@_exported import CrashReporter
import Foundation
@_exported import InstalogIOS
import PhotosUI
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
public struct InstalogAlert {
}
public class ApiClient {
  public init(key: Swift.String)
  public enum ApiError : Swift.Error {
    case invalidURL
    case invalidResponse
    case invalidParameters
    case bundleIdentifierMismatch
    case error(message: Swift.String)
    case unknown(any Swift.Error)
  }
  public func get(endpoint: Swift.String) async throws -> Swift.String
  public func post(endpoint: Swift.String, jsonString: Swift.String) async throws -> Swift.String
  public func multipartRequest(endpoint: Swift.String, jsonParameters: [Swift.String : Any], images: [UIKit.UIImage], imageFieldName: Swift.String = "attachments") async throws -> Swift.String
  @objc deinit
}
public class FeedbackManager {
  public init()
  public func open()
  public func close()
  @objc deinit
}
public struct FeedbackData : Swift.Identifiable {
  public let id: Foundation.UUID
  public var email: Swift.String
  public var text: Swift.String
  public typealias ID = Foundation.UUID
}
@_hasMissingDesignatedInitializers open class FeedbackDataViewModel : Combine.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}



@available(iOS 13, *)
public class FieldChecker2<T> : Combine.ObservableObject where T : Swift.Hashable {
  @Combine.Published @_projectedValueProperty($errorMessage) public var errorMessage: Swift.String? {
    get
  }
  public var $errorMessage: Combine.Published<Swift.String?>.Publisher {
    get
  }
  public var isFirstCheck: Swift.Bool {
    get
  }
  public var valid: Swift.Bool {
    get
  }
  public init(errorMessage: Swift.String? = nil)
  @available(iOS 13, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SwiftUICore.Binding where Value : Swift.Hashable {
  public func onValidate(checker: InstalogIOS.FieldChecker2<Value>, debounceInMills debounce: Swift.Int = 0, validator: @escaping (Value) -> Swift.String?) -> SwiftUICore.Binding<Value>
}
@available(iOS 13, *)
public struct FieldChecker {
  public var errorMessage: Swift.String?
  public var isFirstCheck: Swift.Bool {
    get
  }
  public var valid: Swift.Bool {
    get
  }
  public init(errorMessage: Swift.String? = nil)
}
extension InstalogIOS.FieldChecker {
  public var errorMessageOrNilAtBeginning: Swift.String? {
    get
  }
}
@available(iOS 13, *)
public class FieldValidator<T> : Combine.ObservableObject where T : Swift.Hashable {
  public typealias Validator = (T) -> Swift.String?
  @Combine.Published @_projectedValueProperty($value) public var value: T {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $value: Combine.Published<T>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var isValid: Swift.Bool {
    get
  }
  public var errorMessage: Swift.String? {
    get
  }
  public init(_ value: SwiftUICore.Binding<T>, checker: SwiftUICore.Binding<InstalogIOS.FieldChecker>, validator: @escaping InstalogIOS.FieldValidator<T>.Validator)
  public func doValidate()
  @available(iOS 13, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13, *)
@_Concurrency.MainActor @preconcurrency public struct TextFieldWithValidator {
  public typealias Validator = (Swift.String) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String = "", value: SwiftUICore.Binding<Swift.String>, checker: SwiftUICore.Binding<InstalogIOS.FieldChecker>, onCommit: @escaping () -> Swift.Void, validator: @escaping InstalogIOS.TextFieldWithValidator.Validator)
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String = "", value: SwiftUICore.Binding<Swift.String>, checker: SwiftUICore.Binding<InstalogIOS.FieldChecker>, validator: @escaping InstalogIOS.TextFieldWithValidator.Validator)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11InstalogIOS22TextFieldWithValidatorV4bodyQrvp", 0) __
}
@available(iOS 13, *)
@_Concurrency.MainActor @preconcurrency public struct SecureFieldWithValidator {
  public typealias Validator = (Swift.String) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String = "", value: SwiftUICore.Binding<Swift.String>, checker: SwiftUICore.Binding<InstalogIOS.FieldChecker>, onCommit: @escaping () -> Swift.Void, validator: @escaping InstalogIOS.SecureFieldWithValidator.Validator)
  @_Concurrency.MainActor @preconcurrency public init(title: Swift.String = "", value: SwiftUICore.Binding<Swift.String>, checker: SwiftUICore.Binding<InstalogIOS.FieldChecker>, validator: @escaping InstalogIOS.SecureFieldWithValidator.Validator)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13, *)
  public typealias Body = @_opaqueReturnTypeOf("$s11InstalogIOS24SecureFieldWithValidatorV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class InstaCrash {
  public static let shared: InstalogIOS.InstaCrash
  final public func initialize()
  final public func processPendingReports()
  final public func sendPendingReports()
  final public func simulateCrash()
  final public func generateLiveReport()
  final public func simulateCrashByAbort()
  @objc deinit
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.String : @retroactive Swift.Error {
}
#else
extension Swift.String : Swift.Error {
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension Swift.String : @retroactive Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
#else
extension Swift.String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
#endif
@_hasMissingDesignatedInitializers final public class InstaDevice {
  public static let shared: InstalogIOS.InstaDevice
  @objc deinit
}
public struct InstalogOptions {
  public var isCrashEnabled: Swift.Bool
  public var isFeedbackEnabled: Swift.Bool
  public var isLogEnabled: Swift.Bool
  public var isLoggerEnabled: Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class Instalog : ObjectiveC.NSObject {
  public static let shared: InstalogIOS.Instalog
  public static let crash: InstalogIOS.InstaCrash
  public var userId: Swift.String?
  public var apiKey: Swift.String?
  public var options: InstalogIOS.InstalogOptions?
  public func initialize(key: Swift.String, options: InstalogIOS.InstalogOptions? = nil)
  public func identifyUser(_ userId: Swift.String)
  public func getDeviceIdentifier() -> Swift.String
  public func showFeedbackModal()
  public func logEvent(log: InstalogIOS.InstalogLogModel)
  public func sendCrash(name: Swift.String?, report: Swift.String?, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func prepareCrashModel(log: InstalogIOS.InstalogLogModel? = nil, feedback: InstalogIOS.InstalogFeedbackModel? = nil, stackTrace: InstalogIOS.InstalogStackTraceModel? = nil) -> InstalogIOS.InstalogCrashModel
  public func runReportWithLogger(_ report: InstalogIOS.InstalogCrashModel)
  public func sendFeedback(_ feedback: InstalogIOS.FeedbackData) async throws -> Swift.Bool
  public func sendReport(data: InstalogIOS.InstalogCrashModel) async throws -> Swift.Bool
  public func getUserId() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public struct InstalogLogger {
}
public struct InstalogCrashModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstalogStackTraceModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias InstalogLogParams = [Swift.String : Swift.String]
public struct InstalogLogModel : Swift.Codable {
  public init(event: Swift.String, params: InstalogIOS.InstalogLogParams)
  public enum InstalogLogModel : Swift.String, Swift.CodingKey {
    case event
    case params
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstalogFeedbackModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ModelLookup {
  public static func productName(for deviceType: Swift.String, platformIdentifier: Swift.String) -> Swift.String
}
@available(iOS 13, *)
extension InstalogIOS.TextFieldWithValidator : SwiftUICore.View {}
@available(iOS 13, *)
extension InstalogIOS.TextFieldWithValidator : Swift.Sendable {}
@available(iOS 13, *)
extension InstalogIOS.SecureFieldWithValidator : SwiftUICore.View {}
@available(iOS 13, *)
extension InstalogIOS.SecureFieldWithValidator : Swift.Sendable {}
extension InstalogIOS.InstalogLogModel.InstalogLogModel : Swift.Equatable {}
extension InstalogIOS.InstalogLogModel.InstalogLogModel : Swift.Hashable {}
extension InstalogIOS.InstalogLogModel.InstalogLogModel : Swift.RawRepresentable {}
